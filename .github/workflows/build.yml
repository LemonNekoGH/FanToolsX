name: Build

on:
  push:
    tags:
      - '*'

jobs:
  start:
    runs-on: ubuntu-latest
    steps:
      - name: Send start message to telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TG_TO }}
          token: ${{ secrets.TG_TOKEN }}
          format: markdown
          message: |
            GitHub Actions Start
            Workflow Name: ${{ github.workflow }}
            Url: https://github.com/LemonNekoGH/talk
            Trigger: `${{ github.ref_name }}` `${{ github.event.commits[0].id }}`

  build:
    needs: start
    strategy:
      matrix:
        # For web, android, macos-amd64, macos-arm64
        os: [ubuntu-latest, 'ubuntu-20.04', macos-latest, self-hosted]
    runs-on: ${{ matrix.os }}
    name: Build
    steps:
      - uses: actions/checkout@v3

      - name: Import KeyStore
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run: |
          cd android
          echo "${{ secrets.KEYSTORE }}" > tmpKeyStoreBase64
          base64 -d tmpKeyStoreBase64 > tmpKeyStore
          echo "storeFile=../tmpKeyStore" > keystore.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> keystore.properties
          echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> keystore.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> keystore.properties

      - name: Set version name for android
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run: |
          cd android
          echo "appVersion=${{ github.ref_name }}" > version.properties

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Set version name for macos
        run: node update_version.js '${{ github.ref_name }}'
        if: ${{ matrix.os == 'macos-latest' || matrix.os == 'self-hosted' }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        id: pnpm-install
        with:
          version: 7
          run_install: false
      # used by dependencies cache
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm i --no-frozen-lockfile

      - name: Setup Java for Android
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'gradle'

      - name: Create output dir
        run: |
          mkdir -p output/${{ github.ref_name }}

      - name: Build Android
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run: |
          pnpm build:android:release
          mv ./android/app/build/outputs/apk/release/app-release.apk ./output/${{ github.ref_name }}/FanToolsX_${{ github.ref_name }}.apk

      - name: Build macOS Arm64
        if: ${{ matrix.os == 'self-hosted' }}
        run: |
          pnpm build:mac
          mv ./dist/FanToolsX-${{ github.ref_name }}-arm64.dmg ./output/${{ github.ref_name }}/

      - name: Build macOS Amd64
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          pnpm build:mac
          mv ./dist/FanToolsX-${{ github.ref_name }}-amd64.dmg ./output/${{ github.ref_name }}/

      - name: Build Web
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: pnpm build:web

      - name: Deploy for web
        uses: Azure/static-web-apps-deploy@v1
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_BLACK_FIELD_07270FC00 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/dist_web" # APP 路径，但因为跳过构建所以会直接上传，所以直接使用构建输出的目录
          skip_app_build: true # 跳过构建

      # this action no docker container required
      - name: Upload to S3
        uses: shallwefootball/s3-upload-action@master
        if: ${{ matrix.os != 'ubuntu-latest' }}
        with:
          aws_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_ACCESS_KEY}}
          aws_bucket: fantoolsx-releases
          source_dir: './output'

  end:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Send start message to telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TG_TO }}
          token: ${{ secrets.TG_TOKEN }}
          format: markdown
          message: |
            GitHub Actions Start
            Workflow Name: ${{ github.workflow }}
            Url: https://github.com/LemonNekoGH/talk
            Trigger: `${{ github.ref_name }}` `${{ github.event.commits[0].id }}`
